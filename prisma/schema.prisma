// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate dev --name init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  low
  medium
  high
}

model User {
  id                String         @id @default(cuid())
  firstName         String
  lastName          String
  email             String         @unique
  isAdmin           Boolean        @default(false)
  isDeleted         Boolean        @default(false)
  password          String         @default("Welcome1!")
  createdAt         DateTime       @default(now())
  boards            Board[]        @relation(name: "BoardToUser")
  myTasks           Task[]         @relation("AssignedTasks")
  updatedTasks      Task[]         @relation("UpdatedTasks")
  isLogin           Boolean?
  lastLogin         DateTime?
  roles             String[]       @default(["client"])
  profileImage      String?
  collaborations    Collaborator[]
  clinics           Clinic[]       @relation(name: "ClinicToUser")
  conversations     Conversation[] @relation("conversations")
  notifications     Notification[] @relation(name: "NotificationToUser")
  readNotifications String[]
}

model Clinic {
  id          String   @id @default(cuid())
  createdBy   String
  name        String
  description String?
  meta        Json?
  createdAt   DateTime @default(now())
  users       User[]   @relation(name: "ClinicToUser")
  tasks       Task[]   @relation(name: "ClinicToTask")
}

model Board {
  id              String         @id @default(cuid())
  createdBy       String
  status          String         @default("active")
  description     String?
  name            String
  color           String
  icon            String?
  createdAt       DateTime       @default(now())
  users           User[]         @relation(name: "BoardToUser")
  userIds         String[]
  BoardStatus     BoardStatus[]  @relation("BoardStatuses")
  Automations     Automations[]  @relation("BoardAutomations")
  taskTemplate    TaskTemplate[] @relation(name: "BoardToTaskTemplate")
  defaultTemplate String?
}

model BoardStatus {
  id         String   @id @default(cuid())
  createdBy  String
  createdAt  DateTime @default(now())
  name       String
  board      Board?   @relation("BoardStatuses", fields: [boardId], references: [id], onDelete: Cascade) // Optional relation
  boardId    String?
  position   Int
  tasks      Task[]   @relation("TaskStatus")
  isComplete Boolean  @default(false)
}

model Task {
  id           String         @id @default(cuid())
  name         String
  taskLink     String?        @default("")
  description  String?
  isCompleted  Boolean?       @default(false)
  status       BoardStatus    @relation("TaskStatus", fields: [statusId], references: [id]) // Using BoardStatus for task status
  statusId     String
  boardId      String         @default("")
  priority     String         @default("low") // 'Low', 'Medium', 'High', etc.
  dueDate      DateTime?
  createdBy    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  assignedTo   User?          @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId   String? // User to whom the task is assigned
  updatedBy    User?          @relation("UpdatedTasks", fields: [updatedById], references: [id])
  updatedById  String? // User who last updated the task
  parent       Task?          @relation("Subtasks", fields: [parentId], references: [id]) // Parent task (for subtasks)
  parentId     String? // Foreign key to parent task
  subtasks     Task[]         @relation("Subtasks") // Subtasks
  collaborator Collaborator[]
  clinic       Clinic?        @relation(name: "ClinicToTask", fields: [clinicId], references: [id])
  clinicId     String?
  conversation Conversation?  @relation("taskComments")
}

model Collaborator {
  id     String @id @default(cuid())
  role   String // Define roles like "owner", "editor", "viewer"
  user   User   @relation(fields: [userId], references: [id])
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  @@unique([userId, taskId]) // Ensure a user can have only one role per board
}

model Automations {
  id        String   @id @default(cuid())
  name      String
  status    String   @default("active")
  board     Board    @relation("BoardAutomations", fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  triggers  Json?
  actions   Json?
  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt
}

model Conversation {
  id          String    @id @default(cuid())
  status      String    @default("active")
  type        String?   @default("private")
  task        Task?     @relation("taskComments", fields: [taskId], references: [id])
  taskId      String?   @unique
  name        String?
  description String?
  icon        String?
  users       User[]    @relation("conversations")
  messages    Message[] @relation("conversationMessages")
  createdBy   String
  createdAt   DateTime  @default(now())
}

model Message {
  id              String        @id @default(cuid())
  status          String        @default("active")
  type            String?
  content         String
  parentMessage   Message?      @relation("MessageReplies", fields: [parentMessageId], references: [id])
  parentMessageId String? // Nullable, will be set if it's a reply to another message
  conversation    Conversation? @relation("conversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String?
  createdBy       String
  createdAt       DateTime      @default(now())
  replies         Message[]     @relation("MessageReplies")
}

model Notification {
  id        String   @id @default(cuid())
  emailedTo String[]
  type      String?
  dataId    String?
  title     String?
  content   String
  sentTo    User[]   @relation(name: "NotificationToUser")
  appRoute  String?
  createdBy String
  createdAt DateTime @default(now())
}

model TaskTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  data        Json
  boards      Board[]  @relation(name: "BoardToTaskTemplate")
  updatedBy   String?
  updatedAt   DateTime @updatedAt
  createdBy   String
  createdAt   DateTime @default(now())
}
